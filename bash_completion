_git_flow ()
{
local subcommands="init feature release hotfix help version"
local subcommand="$(__git_find_on_cmdline "$subcommands")"
if [ -z "$subcommand" ]; then
__gitcomp "$subcommands"
return
fi

case "$subcommand" in
init)
__git_flow_init
return
;;
feature)
__git_flow_feature
return
;;
release)
__git_flow_release
return
;;
hotfix)
__git_flow_hotfix
return
;;
*)
COMPREPLY=()
;;
esac
}

__git_flow_init ()
{
local subcommands="help"
local subcommand="$(__git_find_on_cmdline "$subcommands")"
if [ -z "$subcommand" ]; then
__gitcomp "$subcommands"
return
fi
}

__git_flow_feature ()
{
local subcommands="list start finish publish track diff rebase checkout pull
help"
local subcommand="$(__git_find_on_cmdline "$subcommands")"
if [ -z "$subcommand" ]; then
__gitcomp "$subcommands"
return
fi

case "$subcommand" in
pull)
__gitcomp "$(__git_remotes)"
return
;;
checkout|finish|diff|rebase)
__gitcomp "$(__git_flow_list_branches 'feature')"
return
;;
publish)
__gitcomp "$(comm -23 <(__git_flow_list_branches 'feature')
<(__git_flow_list_remote_branches 'feature'))"
return
;;
track)
__gitcomp "$(comm -23 <(__git_flow_list_remote_branches 'feature')
<(__git_flow_list_branches 'feature'))"
return
;;
*)
COMPREPLY=()
;;
esac
}

__git_flow_release ()
{
local subcommands="list start finish track publish help"
local subcommand="$(__git_find_on_cmdline "$subcommands")"
if [ -z "$subcommand" ]; then
__gitcomp "$subcommands"
return
fi
case "$subcommand" in
finish)
__gitcomp "$(__git_flow_list_branches 'release')"
return
;;
publish)
__gitcomp "$(comm -23 <(__git_flow_list_branches 'release')
<(__git_flow_list_remote_branches 'release'))"
return
;;
track)
__gitcomp "$(comm -23 <(__git_flow_list_remote_branches 'release')
<(__git_flow_list_branches 'release'))"
return
;;
*)
COMPREPLY=()
;;
esac

}

__git_flow_hotfix ()
{
local subcommands="list start finish help"
local subcommand="$(__git_find_on_cmdline "$subcommands")"
if [ -z "$subcommand" ]; then
__gitcomp "$subcommands"
return
fi

case "$subcommand" in
finish)
__gitcomp "$(__git_flow_list_branches 'hotfix')"
return
;;
*)
COMPREPLY=()
;;
esac
}

__git_flow_prefix ()
{
case "$1" in
feature|release|hotfix)
git config "gitflow.prefix.$1" 2> /dev/null || echo "$1/"
return
;;
esac
}

__git_flow_list_branches ()
{
local prefix="$(__git_flow_prefix $1)"
git branch 2> /dev/null | tr -d ' |*' | grep "^$prefix" | sed s,^$prefix,, |
sort
}

__git_flow_list_remote_branches ()
{
local prefix="$(__git_flow_prefix $1)"
local origin="$(git config gitflow.origin 2> /dev/null || echo "origin")"
git branch -r 2> /dev/null | sed "s/^ *//g" | grep "^$origin/$prefix" | sed
s,^$origin/$prefix,, | sort
}

# alias __git_find_on_cmdline for backwards compatibility
if [ -z "`type -t __git_find_on_cmdline`" ]; then
alias __git_find_on_cmdline=__git_find_subcommand
fi

# ghclone
_ghclone() {
  local cur
  _get_comp_words_by_ref cur

  COMPREPLY=( $(compgen -W "$(
    curl --compressed -sf
"http://github.com/api/v2/json/repos/show/${COMP_WORDS[1]}" |
    json_reformat 2>/dev/null |
    sed -n '/"name":/s|.*: "\([^"]\+\)",|\1|p')" -- $cur)
  )
}
complete -F _ghclone ghclone